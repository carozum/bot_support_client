version: "3.9"

services:
  db:
    image: postgres:14
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data


  etl:
    build: ./etl
    ports:
      - "5000:5000"
    depends_on:
      - db
    env_file:
      - .env


  app:
    build: ./app
    ports:
      - "8000:8000"
    volumes:
      - ./data-brute:/app/data-brute
    env_file:
      - .env
    networks:
      - monitoring    # expose /metrics grâce à Instrumentator()
      - backend


  prometheus:   # Scrape /metrics de app
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    depends_on:
      - app
    networks:
      - monitoring
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  grafana:      # Visualise les métriques Prometheus
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=https://customer.bot-support.fr/grafana
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_BASIC_ENABLED=false                # désactive la connexion utilisateur Grafana
      - GF_AUTH_ANONYMOUS_ENABLED=true             # permet l'accès anonyme
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin           # ou Viewer pour restreindre les droits

  stt:
    build: ./stt
    container_name: stt-service
    env_file:
      - .env
    ports:
      - "8001:8001"
    networks:
      - backend


  app-test:
    build:
      context: ./app
    command: >
      sh -c "
        export PYTHONPATH=/app &&
        pytest /app/tests
      "
    volumes:
      - .:/workspace
    env_file:
      - .env
    environment:
      - ENV=test


  watchdog:
    build: ./watchdog
    volumes:
      - ./data-brute:/app/data-brute
      - ./resultat_extraction:/app/resultat_extraction
      - ./watchdog/log:/app/log
    depends_on:
      - db
    env_file:
      - .env



volumes:
  pgdata:
  grafana-storage:
  prometheus-data:

networks:
  monitoring:
  backend:
